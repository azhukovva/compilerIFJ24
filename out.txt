Token: TOKEN_COMMENT,  Program 3: Prace s retezci a vestavenymi funkcemi
Token: TOKEN_CONST, const
Token: TOKEN_IDENTIFIER, ifj
Token: TOKEN_ASSIGN, =
Token: TOKEN_AT, @
Token: TOKEN_IDENTIFIER, import
Token: TOKEN_LEFT_BRACKET, (
Token: TOKEN_STRING, ifj24.zig
Token: TOKEN_RIGHT_BRACKET, )
Token: TOKEN_SEMICOLON, ;
Token: TOKEN_COMMENT,  Hlavni funkce
Token: TOKEN_PUB, pub
Token: TOKEN_FN, fn

Token: TOKEN_IDENTIFIER, main

Token: TOKEN_LEFT_BRACKET, (

Token: TOKEN_RIGHT_BRACKET, )

Token: TOKEN_VOID, void

Token: TOKEN_LEFT_BRACE, {
    
Token: TOKEN_CONST, const
Token: TOKEN_IDENTIFIER, str1
Token: TOKEN_ASSIGN, =
IFJ24 function: ifj.string
Token: TOKEN_IDENTIFIER_FUNC, ifj.string
Token: TOKEN_LEFT_BRACKET, (
Token: TOKEN_STRING, Toto je text v programu jazyka IFJ24
Token: TOKEN_RIGHT_BRACKET, )
Token: TOKEN_SEMICOLON, ;
Token: TOKEN_VAR, var
Token: TOKEN_IDENTIFIER, str2
Token: TOKEN_ASSIGN, =
IFJ24 function: ifj.string
Token: TOKEN_IDENTIFIER_FUNC, ifj.string
Token: TOKEN_LEFT_BRACKET, (
Token: TOKEN_STRING, , ktery jeste trochu obohatime
Token: TOKEN_RIGHT_BRACKET, )
Token: TOKEN_SEMICOLON, ;
Token: TOKEN_IDENTIFIER, str2
Token: TOKEN_ASSIGN, =
IFJ24 function: ifj.concat
Token: TOKEN_IDENTIFIER_FUNC, ifj.concat
Token: TOKEN_LEFT_BRACKET, (
Token: TOKEN_IDENTIFIER, str1
Token: TOKEN_COMMA, ,
Token: TOKEN_IDENTIFIER, str2
Token: TOKEN_RIGHT_BRACKET, )
Token: TOKEN_SEMICOLON, ;
IFJ24 function: ifj.write
Token: TOKEN_IDENTIFIER_FUNC, ifj.write
Token: TOKEN_LEFT_BRACKET, (
Token: TOKEN_IDENTIFIER, str1
Token: TOKEN_RIGHT_BRACKET, )
Token: TOKEN_SEMICOLON, ;
IFJ24 function: ifj.write
Token: TOKEN_IDENTIFIER_FUNC, ifj.write
Token: TOKEN_LEFT_BRACKET, (
Token: TOKEN_STRING, \n
Token: TOKEN_RIGHT_BRACKET, )
Token: TOKEN_SEMICOLON, ;
IFJ24 function: ifj.write
Token: TOKEN_IDENTIFIER_FUNC, ifj.write
Token: TOKEN_LEFT_BRACKET, (
Token: TOKEN_IDENTIFIER, str2
Token: TOKEN_RIGHT_BRACKET, )
Token: TOKEN_SEMICOLON, ;
IFJ24 function: ifj.write
Token: TOKEN_IDENTIFIER_FUNC, ifj.write
Token: TOKEN_LEFT_BRACKET, (
Token: TOKEN_STRING, \n
Token: TOKEN_RIGHT_BRACKET, )
Token: TOKEN_SEMICOLON, ;
IFJ24 function: ifj.write
Token: TOKEN_IDENTIFIER_FUNC, ifj.write
Token: TOKEN_LEFT_BRACKET, (
Token: TOKEN_STRING, Zadejte serazenou posloupnost malych pismen a-h:\n
Token: TOKEN_RIGHT_BRACKET, )
Token: TOKEN_SEMICOLON, ;
Token: TOKEN_VAR, var
Token: TOKEN_IDENTIFIER, newInput
Token: TOKEN_ASSIGN, =
IFJ24 function: ifj.readstr
Token: TOKEN_IDENTIFIER_FUNC, ifj.readstr
Token: TOKEN_LEFT_BRACKET, (
Token: TOKEN_RIGHT_BRACKET, )
Token: TOKEN_SEMICOLON, ;
Token: TOKEN_VAR, var
Token: TOKEN_IDENTIFIER, all
Token: TOKEN_COLON, :
Token: TOKEN_U8, []u8
Token: TOKEN_ASSIGN, =
IFJ24 function: ifj.string
Token: TOKEN_IDENTIFIER_FUNC, ifj.string
Token: TOKEN_LEFT_BRACKET, (
Token: TOKEN_STRING,  
Token: TOKEN_RIGHT_BRACKET, )
Token: TOKEN_SEMICOLON, ;
Token: TOKEN_WHILE, while
Token: TOKEN_LEFT_BRACKET, (
Token: TOKEN_IDENTIFIER, newInput
Token: TOKEN_RIGHT_BRACKET, )
Token: TOKEN_PIPE, |
Token: TOKEN_IDENTIFIER, inpOK
Token: TOKEN_PIPE, |
Token: TOKEN_LEFT_BRACE, {
Token: TOKEN_CONST, const
Token: TOKEN_IDENTIFIER, abcdefgh
Token: TOKEN_ASSIGN, =
IFJ24 function: ifj.string
Token: TOKEN_IDENTIFIER_FUNC, ifj.string
Token: TOKEN_LEFT_BRACKET, (
Token: TOKEN_STRING, abcdefgh
Token: TOKEN_RIGHT_BRACKET, )
Token: TOKEN_SEMICOLON, ;
Token: TOKEN_CONST, const
Token: TOKEN_IDENTIFIER, strcmpResult
Token: TOKEN_ASSIGN, =
IFJ24 function: ifj.strcmp
Token: TOKEN_IDENTIFIER_FUNC, ifj.strcmp
Token: TOKEN_LEFT_BRACKET, (
Token: TOKEN_IDENTIFIER, inpOK
Token: TOKEN_COMMA, ,
Token: TOKEN_IDENTIFIER, abcdefgh
Token: TOKEN_RIGHT_BRACKET, )
Token: TOKEN_SEMICOLON, ;
Token: TOKEN_IF, if
Token: TOKEN_LEFT_BRACKET, (
Token: TOKEN_IDENTIFIER, strcmpResult
Token: TOKEN_EQUAL, ==
Token: TOKEN_INT, 0
Token: TOKEN_RIGHT_BRACKET, )
Token: TOKEN_LEFT_BRACE, {
IFJ24 function: ifj.write
Token: TOKEN_IDENTIFIER_FUNC, ifj.write
Token: TOKEN_LEFT_BRACKET, (
Token: TOKEN_STRING, Spravne zadano!\n
Token: TOKEN_RIGHT_BRACKET, )
Token: TOKEN_SEMICOLON, ;
IFJ24 function: ifj.write
Token: TOKEN_IDENTIFIER_FUNC, ifj.write
Token: TOKEN_LEFT_BRACKET, (
Token: TOKEN_IDENTIFIER, all
Token: TOKEN_RIGHT_BRACKET, )
Token: TOKEN_SEMICOLON, ;
Token: TOKEN_COMMENT,  vypsat spojene nepodarene vstupy newInput = null; // misto break;
Token: TOKEN_RIGHT_BRACE, }
Token: TOKEN_ELSE, else
Token: TOKEN_LEFT_BRACE, {
IFJ24 function: ifj.write
Token: TOKEN_IDENTIFIER_FUNC, ifj.write
Token: TOKEN_LEFT_BRACKET, (
Token: TOKEN_STRING, Spatne zadana posloupnost, zkuste znovu:\n
Token: TOKEN_RIGHT_BRACKET, )
Token: TOKEN_SEMICOLON, ;
Token: TOKEN_IDENTIFIER, all
Token: TOKEN_ASSIGN, =
IFJ24 function: ifj.concat
Token: TOKEN_IDENTIFIER_FUNC, ifj.concat
Token: TOKEN_LEFT_BRACKET, (
Token: TOKEN_IDENTIFIER, all
Token: TOKEN_COMMA, ,
Token: TOKEN_IDENTIFIER, inpOK
Token: TOKEN_RIGHT_BRACKET, )
Token: TOKEN_SEMICOLON, ;
Token: TOKEN_COMMENT,  spojuji neplatne vstupy newInput = ifj.readstr();
Token: TOKEN_RIGHT_BRACE, }
Token: TOKEN_RIGHT_BRACE, }
Token: TOKEN_RIGHT_BRACE, }
